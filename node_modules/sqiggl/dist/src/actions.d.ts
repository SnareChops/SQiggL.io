import { Parser } from './parser';
import { ScopedVariables } from './parser';
import { DSL, DSLCommand } from './dsl';
export interface BaseAction {
    name?: string;
    key: string;
}
export interface StartingAction extends BaseAction {
    rule: (expressionResult: string | boolean, variables: ScopedVariables, scope: DSL[], parser: Parser) => string;
}
export interface DependentAction extends BaseAction {
    dependents: StartingAction[];
    rule: (expressionResult: string | boolean, variables: ScopedVariables, scope: DSL[], parser: Parser) => string;
}
export interface TerminatingAction extends BaseAction {
    dependents: (StartingAction | IterableAction)[];
}
export interface IterableAction extends BaseAction {
    rule: (expressionResult: string[], variables: ScopedVariables, scope: DSL[], parser: Parser, commandDSL: DSLCommand) => string;
}
export declare type Action = StartingAction | DependentAction | TerminatingAction | IterableAction;
/**
 * @internal
 */
export declare var If: StartingAction;
/**
 * @internal
 */
export declare var EndIf: TerminatingAction;
/**
 * @internal
 */
export declare var Unless: StartingAction;
/**
 * @internal
 */
export declare var EndUnless: TerminatingAction;
/**
 * @internal
 */
export declare var Else: DependentAction;
/**
 * @internal
 */
export declare var For: IterableAction;
/**
 * @internal
 */
export declare var EndFor: TerminatingAction;
export declare var CORE_ACTIONS: Action[];
