var expression_parser_1 = require('./expression.parser');
/**
 * The parser responsible for parsing all DSLExpressionTrees
 *
 * @internal
 */
var ExpressionTreeParser = (function () {
    /**
     * Creates a new instance of ExpressionTreeParser
     *
     * @param options {ParserOptions} - The {@link ParserOptions} used for string output.
     */
    function ExpressionTreeParser(options) {
        this.options = options;
    }
    /**
     * Take a DSLExpressionTree and parse each of the expressions contained in it, joining the
     * results with the conjunctions used and outputting an ExpressionResult to be used by a
     * {@link Replacement} or a {@link Command}
     *
     * @param dsl {DSLExpressionTree} - The DSLExpressionTree to parse.
     * @param variables {ScopedVariables} - The ScopedVariables to use for parsing.
     * @returns {ExpressionResult} - The final result of evaluating the expression tree.
     */
    ExpressionTreeParser.prototype.parse = function (dsl, variables) {
        var result, idx = 0;
        while (idx < dsl.branches.length) {
            var current = new expression_parser_1.ExpressionParser(this.options).parse(dsl.branches[idx], variables);
            if (idx > 0 && dsl.conjunctions[idx - 1]) {
                result.value = dsl.conjunctions[idx - 1].rule([result.value, current.value]);
            }
            else
                result = current;
            idx++;
        }
        return result;
    };
    return ExpressionTreeParser;
})();
exports.ExpressionTreeParser = ExpressionTreeParser;
