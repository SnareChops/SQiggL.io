var parser_1 = require('../parser');
var expression_tree_parser_1 = require('./expression.tree.parser');
/**
 * The parser responsible for parsing all DSLCommands
 *
 * @internal
 */
var CommandParser = (function () {
    /**
     * Creates a new instance of CommandParser.
     *
     * @internal
     * @param options {ParserOptions} - The {@link ParserOptions} for string output.
     */
    function CommandParser(options) {
        this.options = options;
    }
    /**
     * Take a DSLReplacement, run any expressions against it, and output the final string.
     *
     * @internal
     * @param dsl {DSLCommand} - The DSL to parse.
     * @param scope {DSL[]} - The scope that is below this command.
     * @param variables {ScopedVariables} - The list of all known variables for this scope.
     * @returns {string} - The final output string for this command.
     */
    CommandParser.prototype.parse = function (dsl, scope, variables) {
        var action = dsl.action;
        var expressionResult, result;
        if (!!action.rule) {
            if (!!dsl.expressions) {
                expressionResult = new expression_tree_parser_1.ExpressionTreeParser(this.options).parse(dsl.expressions, variables);
                if (!!expressionResult.iterable)
                    result = action.rule(expressionResult, variables, scope, new parser_1.Parser(this.options));
                else
                    result = action.rule(expressionResult, variables, scope, new parser_1.Parser(this.options));
            }
            else {
                result = action.rule({ value: dsl.literalValue }, variables, scope, new parser_1.Parser(this.options));
            }
        }
        if (result === null)
            dsl.failed = true;
        return result || '';
    };
    return CommandParser;
})();
exports.CommandParser = CommandParser;
