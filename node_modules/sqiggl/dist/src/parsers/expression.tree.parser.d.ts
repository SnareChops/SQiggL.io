import { ParserOptions, ScopedVariables } from '../parser';
import { DSLExpressionTree } from '../dsl';
import { ExpressionResult } from '../expressions';
/**
 * The parser responsible for parsing all DSLExpressionTrees
 *
 * @internal
 */
export declare class ExpressionTreeParser {
    private options;
    /**
     * Creates a new instance of ExpressionTreeParser
     *
     * @param options {ParserOptions} - The {@link ParserOptions} used for string output.
     */
    constructor(options: ParserOptions);
    /**
     * Take a DSLExpressionTree and parse each of the expressions contained in it, joining the
     * results with the conjunctions used and outputting an ExpressionResult to be used by a
     * {@link Replacement} or a {@link Command}
     *
     * @param dsl {DSLExpressionTree} - The DSLExpressionTree to parse.
     * @param variables {ScopedVariables} - The ScopedVariables to use for parsing.
     * @returns {ExpressionResult} - The final result of evaluating the expression tree.
     */
    parse(dsl: DSLExpressionTree, variables: ScopedVariables): ExpressionResult;
}
