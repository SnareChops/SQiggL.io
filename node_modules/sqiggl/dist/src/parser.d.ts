import { DSL } from './dsl';
export interface ParserOptions {
    exportComments?: boolean;
    commentBeginning?: string;
    commentEnding?: string;
    stringEscapeChar?: string;
    trueString?: string;
    falseString?: string;
}
export interface ScopedVariables {
    [key: string]: any;
}
export declare const DEFAULT_PARSER_OPTIONS: ParserOptions;
/**
 * The parent parser to all specific parsers
 *
 * @internal
 */
export declare class Parser {
    /**
     * @internal
     */
    private options;
    /**
     * Creates a new instance of Parser
     *
     * @internal
     * @param options {ParserOptions}
     */
    constructor(options?: ParserOptions);
    /**
     * Sets the options for the parser
     *
     * @internal
     * @param options {ParserOptions}
     */
    private setOptions(options);
    /**
     * Walk the DSL and generate final SQL output
     *
     * @internal
     * @param dsl {DSL[]} - The DSL generated by the Lexer
     * @param variables {ScopedVariables}
     * @returns {string} - The final SQL output
     */
    parse(dsl: DSL[], variables?: ScopedVariables): string;
    /**
     * Resolve the known variables within the scope and return the modified collection
     *
     * @param dsl {DSLVariable}
     * @param scopedVariables {ScopedVariables}
     * @returns {ScopedVariables}
     */
    private resolveVariable(dsl, scopedVariables);
    /**
     * Resolves a value as either a literal string, literal number,
     * or a variable value and then returns that value as a string.
     *
     * - If the value is an array, return it unchanged
     * - If the value starts with a quote, then it must be a string literal.
     *   Strip the quotes and return the literal value.
     * - If the value is a number, then it must be a literal number.
     *   Return the number unchanged.
     * - If a variable has the same name as the value, then resolve the
     *   value to the variable and return the value of the variable.
     * - Throw an error if none of the above.
     *
     * @internal
     * @param value {string | number | string[]} - The value to resolve.
     * @param variables {ScopedVariables} - The list of known variables for this scope.
     * @param suppressUndefinedVariableError {boolean} - Do not throw an error if a value cannot be resolved.
     * @returns {string} - The resolved value.
     */
    static resolveValue(value: string | number | string[], variables: ScopedVariables, suppressUndefinedVariableError?: boolean): string | string[];
}
