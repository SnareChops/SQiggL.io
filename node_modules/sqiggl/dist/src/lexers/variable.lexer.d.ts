import { LexerOptions } from '../lexer';
import { DSLVariable } from '../dsl';
/**
 * The Lexer responsible for all DSL generation of variable statements
 *
 * @internal
 */
export declare class VariableLexer {
    private options;
    /**
     * Creates a new instance of the VariableLexer
     *
     * @internal
     * @param options {LexerOptions} - The LexerOptions to use when generating DSL
     */
    constructor(options: LexerOptions);
    /**
     * Walk through a variable declaration and return a variable DSL
     *
     * TODO: Add rules
     *
     * @internal
     * @param input {string}
     * @returns {DSLVariable}
     */
    invoke(input: string): DSLVariable;
    /**
     * Generate the DSL for a variable piece by piece. Building on the definition until complete.
     *
     * @internal
     * @param dsl {DSLVariable}
     * @param type {DSLVariableType}
     * @param value {string}
     * @param isArray {boolean}
     * @returns {DSLVariable}
     */
    private generateDSL(dsl, type, value, isArray);
    private convertCSVToArray(input);
    /**
     * Clean and prepare the input for parsing
     *
     * @internal
     * @param input {string}
     * @returns {string}
     */
    static cleanStringForLexing(input: string): string;
}
